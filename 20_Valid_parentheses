class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack= new Stack<>();
        //create a hap man to map values
        HashMap<Character, Character> mapping=new HashMap<>();
        mapping.put(')','(');
        mapping.put('}','{');
        mapping.put(']','[');
        
        //loop through converted char array 
        for(char c : s.toCharArray()){
            if(mapping.containsValue(c)){
                //if character value is in mapping push to stack 
                stack.push(c);

            }else if(mapping.containsKey(c)){
            //if charcter values is  akey in mapp then 
            //check to see if a) stack is empty or b)if the value of that key does not equal the pop value of the stack 
                if (stack.isEmpty() || mapping.get(c) != stack.pop()) {
                    return false;
            }
        }

    }
    return stack.isEmpty();
}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

Example 5:

Input: s = "([)]"

Output: false

 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
