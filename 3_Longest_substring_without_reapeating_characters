Given a string s, find the length of the longest substring without duplicate characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
/////////////////////////////////////////////////////////////////////
class Solution {
    public int lengthOfLongestSubstring(String s) {
       int maxLength =0;
       int left =0;
       HashMap<Character,Integer> lastSeen = new HashMap<>();

       for(int right=0; right< s.length();right++){
        char c=s.charAt(right);
        //if character in map is TRUE AND the position of that key is bigger than current starting position 
        if(lastSeen.containsKey(c) && (lastSeen.get(c)>=left) ){
            System.out.println("Right"+right);
            System.out.println("left before increment"+left);

            /*if btoh conditions true
            update the left to the index next to the last occurrence of */
            left=lastSeen.get(c)+1;
            System.out.println("left bafter efore increment"+left);
        }
        maxLength=Math.max(maxLength, right-left+1);
        System.out.println("length "+maxLength);
        lastSeen.put(c,right);

       }

        return maxLength;
    }
}
